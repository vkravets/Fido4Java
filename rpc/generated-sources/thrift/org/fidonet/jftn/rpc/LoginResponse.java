/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.fidonet.jftn.rpc;

import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import java.util.*;

public class LoginResponse implements org.apache.thrift.TBase<LoginResponse, LoginResponse._Fields>, java.io.Serializable, Cloneable, Comparable<LoginResponse> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LoginResponse");

    private static final org.apache.thrift.protocol.TField RESPOSE_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("respose_status", org.apache.thrift.protocol.TType.I32, (short) 1);
    private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("session_id", org.apache.thrift.protocol.TType.STRING, (short) 2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

    static {
        schemes.put(StandardScheme.class, new LoginResponseStandardSchemeFactory());
        schemes.put(TupleScheme.class, new LoginResponseTupleSchemeFactory());
    }

    /**
     * @see org.fidonet.jftn.rpc.Response
     */
    public org.fidonet.jftn.rpc.Response respose_status; // required
    public String session_id; // required

    /**
     * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        /**
         * @see org.fidonet.jftn.rpc.Response
         */
        RESPOSE_STATUS((short) 1, "respose_status"),
        SESSION_ID((short) 2, "session_id");

        private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

        static {
            for (_Fields field : EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
                case 1: // RESPOSE_STATUS
                    return RESPOSE_STATUS;
                case 2: // SESSION_ID
                    return SESSION_ID;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
        Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.RESPOSE_STATUS, new org.apache.thrift.meta_data.FieldMetaData("respose_status", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, org.fidonet.jftn.rpc.Response.class)));
        tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("session_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        metaDataMap = Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LoginResponse.class, metaDataMap);
    }

    public LoginResponse() {
    }

    public LoginResponse(
            org.fidonet.jftn.rpc.Response respose_status,
            String session_id) {
        this();
        this.respose_status = respose_status;
        this.session_id = session_id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public LoginResponse(LoginResponse other) {
        if (other.isSetRespose_status()) {
            this.respose_status = other.respose_status;
        }
        if (other.isSetSession_id()) {
            this.session_id = other.session_id;
        }
    }

    public LoginResponse deepCopy() {
        return new LoginResponse(this);
    }

    @Override
    public void clear() {
        this.respose_status = null;
        this.session_id = null;
    }

    /**
     * @see org.fidonet.jftn.rpc.Response
     */
    public org.fidonet.jftn.rpc.Response getRespose_status() {
        return this.respose_status;
    }

    /**
     * @see org.fidonet.jftn.rpc.Response
     */
    public LoginResponse setRespose_status(org.fidonet.jftn.rpc.Response respose_status) {
        this.respose_status = respose_status;
        return this;
    }

    public void unsetRespose_status() {
        this.respose_status = null;
    }

    /**
     * Returns true if field respose_status is set (has been assigned a value) and false otherwise
     */
    public boolean isSetRespose_status() {
        return this.respose_status != null;
    }

    public void setRespose_statusIsSet(boolean value) {
        if (!value) {
            this.respose_status = null;
        }
    }

    public String getSession_id() {
        return this.session_id;
    }

    public LoginResponse setSession_id(String session_id) {
        this.session_id = session_id;
        return this;
    }

    public void unsetSession_id() {
        this.session_id = null;
    }

    /**
     * Returns true if field session_id is set (has been assigned a value) and false otherwise
     */
    public boolean isSetSession_id() {
        return this.session_id != null;
    }

    public void setSession_idIsSet(boolean value) {
        if (!value) {
            this.session_id = null;
        }
    }

    public void setFieldValue(_Fields field, Object value) {
        switch (field) {
            case RESPOSE_STATUS:
                if (value == null) {
                    unsetRespose_status();
                } else {
                    setRespose_status((org.fidonet.jftn.rpc.Response) value);
                }
                break;

            case SESSION_ID:
                if (value == null) {
                    unsetSession_id();
                } else {
                    setSession_id((String) value);
                }
                break;

        }
    }

    public Object getFieldValue(_Fields field) {
        switch (field) {
            case RESPOSE_STATUS:
                return getRespose_status();

            case SESSION_ID:
                return getSession_id();

        }
        throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
     */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
            case RESPOSE_STATUS:
                return isSetRespose_status();
            case SESSION_ID:
                return isSetSession_id();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that == null)
            return false;
        if (that instanceof LoginResponse)
            return this.equals((LoginResponse) that);
        return false;
    }

    public boolean equals(LoginResponse that) {
        if (that == null)
            return false;

        boolean this_present_respose_status = true && this.isSetRespose_status();
        boolean that_present_respose_status = true && that.isSetRespose_status();
        if (this_present_respose_status || that_present_respose_status) {
            if (!(this_present_respose_status && that_present_respose_status))
                return false;
            if (!this.respose_status.equals(that.respose_status))
                return false;
        }

        boolean this_present_session_id = true && this.isSetSession_id();
        boolean that_present_session_id = true && that.isSetSession_id();
        if (this_present_session_id || that_present_session_id) {
            if (!(this_present_session_id && that_present_session_id))
                return false;
            if (!this.session_id.equals(that.session_id))
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        HashCodeBuilder builder = new HashCodeBuilder();

        boolean present_respose_status = true && (isSetRespose_status());
        builder.append(present_respose_status);
        if (present_respose_status)
            builder.append(respose_status.getValue());

        boolean present_session_id = true && (isSetSession_id());
        builder.append(present_session_id);
        if (present_session_id)
            builder.append(session_id);

        return builder.toHashCode();
    }

    @Override
    public int compareTo(LoginResponse other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = Boolean.valueOf(isSetRespose_status()).compareTo(other.isSetRespose_status());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetRespose_status()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.respose_status, other.respose_status);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetSession_id()).compareTo(other.isSetSession_id());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetSession_id()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.session_id, other.session_id);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("LoginResponse(");
        boolean first = true;

        sb.append("respose_status:");
        if (this.respose_status == null) {
            sb.append("null");
        } else {
            sb.append(this.respose_status);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("session_id:");
        if (this.session_id == null) {
            sb.append("null");
        } else {
            sb.append(this.session_id);
        }
        first = false;
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class LoginResponseStandardSchemeFactory implements SchemeFactory {
        public LoginResponseStandardScheme getScheme() {
            return new LoginResponseStandardScheme();
        }
    }

    private static class LoginResponseStandardScheme extends StandardScheme<LoginResponse> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, LoginResponse struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // RESPOSE_STATUS
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.respose_status = org.fidonet.jftn.rpc.Response.findByValue(iprot.readI32());
                            struct.setRespose_statusIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // SESSION_ID
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.session_id = iprot.readString();
                            struct.setSession_idIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, LoginResponse struct) throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.respose_status != null) {
                oprot.writeFieldBegin(RESPOSE_STATUS_FIELD_DESC);
                oprot.writeI32(struct.respose_status.getValue());
                oprot.writeFieldEnd();
            }
            if (struct.session_id != null) {
                oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
                oprot.writeString(struct.session_id);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class LoginResponseTupleSchemeFactory implements SchemeFactory {
        public LoginResponseTupleScheme getScheme() {
            return new LoginResponseTupleScheme();
        }
    }

    private static class LoginResponseTupleScheme extends TupleScheme<LoginResponse> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, LoginResponse struct) throws org.apache.thrift.TException {
            TTupleProtocol oprot = (TTupleProtocol) prot;
            BitSet optionals = new BitSet();
            if (struct.isSetRespose_status()) {
                optionals.set(0);
            }
            if (struct.isSetSession_id()) {
                optionals.set(1);
            }
            oprot.writeBitSet(optionals, 2);
            if (struct.isSetRespose_status()) {
                oprot.writeI32(struct.respose_status.getValue());
            }
            if (struct.isSetSession_id()) {
                oprot.writeString(struct.session_id);
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, LoginResponse struct) throws org.apache.thrift.TException {
            TTupleProtocol iprot = (TTupleProtocol) prot;
            BitSet incoming = iprot.readBitSet(2);
            if (incoming.get(0)) {
                struct.respose_status = org.fidonet.jftn.rpc.Response.findByValue(iprot.readI32());
                struct.setRespose_statusIsSet(true);
            }
            if (incoming.get(1)) {
                struct.session_id = iprot.readString();
                struct.setSession_idIsSet(true);
            }
        }
    }

}

