/******************************************************************************
 * Copyright (c) 2012-2014, Vladimir Kravets                                  *
 *  All rights reserved.                                                      *
 *                                                                            *
 *  Redistribution and use in source and binary forms, with or without        *
 *  modification, are permitted provided that the following conditions are    *
 *  met: Redistributions of source code must retain the above copyright notice,
 *  this list of conditions and the following disclaimer.                     *
 *  Redistributions in binary form must reproduce the above copyright notice, *
 *  this list of conditions and the following disclaimer in the documentation *
 *  and/or other materials provided with the distribution.                    *
 *  Neither the name of the Fido4Java nor the names of its contributors       *
 *  may be used to endorse or promote products derived from this software     *
 *  without specific prior written permission.                                *
 *                                                                            *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 *  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,     *
 *  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR    *
 *  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR         *
 *  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,     *
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,       *
 *  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 *  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,  *
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR   *
 *  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,            *
 *  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                        *
 ******************************************************************************/

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.fidonet.jftn.rpc;

import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import java.util.*;

public class VersionResponse implements org.apache.thrift.TBase<VersionResponse, VersionResponse._Fields>, java.io.Serializable, Cloneable, Comparable<VersionResponse> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("VersionResponse");

    private static final org.apache.thrift.protocol.TField RESPONSE_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("response_status", org.apache.thrift.protocol.TType.I32, (short) 1);
    private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.STRING, (short) 2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

    static {
        schemes.put(StandardScheme.class, new VersionResponseStandardSchemeFactory());
        schemes.put(TupleScheme.class, new VersionResponseTupleSchemeFactory());
    }

    /**
     * @see org.fidonet.jftn.rpc.Response
     */
    public org.fidonet.jftn.rpc.Response response_status; // required
    public String version; // required

    /**
     * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        /**
         * @see org.fidonet.jftn.rpc.Response
         */
        RESPONSE_STATUS((short) 1, "response_status"),
        VERSION((short) 2, "version");

        private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

        static {
            for (_Fields field : EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
                case 1: // RESPONSE_STATUS
                    return RESPONSE_STATUS;
                case 2: // VERSION
                    return VERSION;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
        Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.RESPONSE_STATUS, new org.apache.thrift.meta_data.FieldMetaData("response_status", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, org.fidonet.jftn.rpc.Response.class)));
        tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        metaDataMap = Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(VersionResponse.class, metaDataMap);
    }

    public VersionResponse() {
    }

    public VersionResponse(
            org.fidonet.jftn.rpc.Response response_status,
            String version) {
        this();
        this.response_status = response_status;
        this.version = version;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public VersionResponse(VersionResponse other) {
        if (other.isSetResponse_status()) {
            this.response_status = other.response_status;
        }
        if (other.isSetVersion()) {
            this.version = other.version;
        }
    }

    public VersionResponse deepCopy() {
        return new VersionResponse(this);
    }

    @Override
    public void clear() {
        this.response_status = null;
        this.version = null;
    }

    /**
     * @see org.fidonet.jftn.rpc.Response
     */
    public org.fidonet.jftn.rpc.Response getResponse_status() {
        return this.response_status;
    }

    /**
     * @see org.fidonet.jftn.rpc.Response
     */
    public VersionResponse setResponse_status(org.fidonet.jftn.rpc.Response response_status) {
        this.response_status = response_status;
        return this;
    }

    public void unsetResponse_status() {
        this.response_status = null;
    }

    /**
     * Returns true if field response_status is set (has been assigned a value) and false otherwise
     */
    public boolean isSetResponse_status() {
        return this.response_status != null;
    }

    public void setResponse_statusIsSet(boolean value) {
        if (!value) {
            this.response_status = null;
        }
    }

    public String getVersion() {
        return this.version;
    }

    public VersionResponse setVersion(String version) {
        this.version = version;
        return this;
    }

    public void unsetVersion() {
        this.version = null;
    }

    /**
     * Returns true if field version is set (has been assigned a value) and false otherwise
     */
    public boolean isSetVersion() {
        return this.version != null;
    }

    public void setVersionIsSet(boolean value) {
        if (!value) {
            this.version = null;
        }
    }

    public void setFieldValue(_Fields field, Object value) {
        switch (field) {
            case RESPONSE_STATUS:
                if (value == null) {
                    unsetResponse_status();
                } else {
                    setResponse_status((org.fidonet.jftn.rpc.Response) value);
                }
                break;

            case VERSION:
                if (value == null) {
                    unsetVersion();
                } else {
                    setVersion((String) value);
                }
                break;

        }
    }

    public Object getFieldValue(_Fields field) {
        switch (field) {
            case RESPONSE_STATUS:
                return getResponse_status();

            case VERSION:
                return getVersion();

        }
        throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
     */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
            case RESPONSE_STATUS:
                return isSetResponse_status();
            case VERSION:
                return isSetVersion();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that == null)
            return false;
        if (that instanceof VersionResponse)
            return this.equals((VersionResponse) that);
        return false;
    }

    public boolean equals(VersionResponse that) {
        if (that == null)
            return false;

        boolean this_present_response_status = true && this.isSetResponse_status();
        boolean that_present_response_status = true && that.isSetResponse_status();
        if (this_present_response_status || that_present_response_status) {
            if (!(this_present_response_status && that_present_response_status))
                return false;
            if (!this.response_status.equals(that.response_status))
                return false;
        }

        boolean this_present_version = true && this.isSetVersion();
        boolean that_present_version = true && that.isSetVersion();
        if (this_present_version || that_present_version) {
            if (!(this_present_version && that_present_version))
                return false;
            if (!this.version.equals(that.version))
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        HashCodeBuilder builder = new HashCodeBuilder();

        boolean present_response_status = true && (isSetResponse_status());
        builder.append(present_response_status);
        if (present_response_status)
            builder.append(response_status.getValue());

        boolean present_version = true && (isSetVersion());
        builder.append(present_version);
        if (present_version)
            builder.append(version);

        return builder.toHashCode();
    }

    @Override
    public int compareTo(VersionResponse other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = Boolean.valueOf(isSetResponse_status()).compareTo(other.isSetResponse_status());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetResponse_status()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.response_status, other.response_status);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetVersion()).compareTo(other.isSetVersion());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetVersion()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("VersionResponse(");
        boolean first = true;

        sb.append("response_status:");
        if (this.response_status == null) {
            sb.append("null");
        } else {
            sb.append(this.response_status);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("version:");
        if (this.version == null) {
            sb.append("null");
        } else {
            sb.append(this.version);
        }
        first = false;
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class VersionResponseStandardSchemeFactory implements SchemeFactory {
        public VersionResponseStandardScheme getScheme() {
            return new VersionResponseStandardScheme();
        }
    }

    private static class VersionResponseStandardScheme extends StandardScheme<VersionResponse> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, VersionResponse struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // RESPONSE_STATUS
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.response_status = org.fidonet.jftn.rpc.Response.findByValue(iprot.readI32());
                            struct.setResponse_statusIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // VERSION
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.version = iprot.readString();
                            struct.setVersionIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, VersionResponse struct) throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.response_status != null) {
                oprot.writeFieldBegin(RESPONSE_STATUS_FIELD_DESC);
                oprot.writeI32(struct.response_status.getValue());
                oprot.writeFieldEnd();
            }
            if (struct.version != null) {
                oprot.writeFieldBegin(VERSION_FIELD_DESC);
                oprot.writeString(struct.version);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class VersionResponseTupleSchemeFactory implements SchemeFactory {
        public VersionResponseTupleScheme getScheme() {
            return new VersionResponseTupleScheme();
        }
    }

    private static class VersionResponseTupleScheme extends TupleScheme<VersionResponse> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, VersionResponse struct) throws org.apache.thrift.TException {
            TTupleProtocol oprot = (TTupleProtocol) prot;
            BitSet optionals = new BitSet();
            if (struct.isSetResponse_status()) {
                optionals.set(0);
            }
            if (struct.isSetVersion()) {
                optionals.set(1);
            }
            oprot.writeBitSet(optionals, 2);
            if (struct.isSetResponse_status()) {
                oprot.writeI32(struct.response_status.getValue());
            }
            if (struct.isSetVersion()) {
                oprot.writeString(struct.version);
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, VersionResponse struct) throws org.apache.thrift.TException {
            TTupleProtocol iprot = (TTupleProtocol) prot;
            BitSet incoming = iprot.readBitSet(2);
            if (incoming.get(0)) {
                struct.response_status = org.fidonet.jftn.rpc.Response.findByValue(iprot.readI32());
                struct.setResponse_statusIsSet(true);
            }
            if (incoming.get(1)) {
                struct.version = iprot.readString();
                struct.setVersionIsSet(true);
            }
        }
    }

}

